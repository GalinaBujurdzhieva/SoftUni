//01. Employees
function employees(inputData){
    for (const input of inputData) {
        let newEmployee = {
            name: input,
            'personal number': input.length,
        };
        console.log(`Name: ${newEmployee.name} -- Personal Number: ${newEmployee['personal number']}`)
    }
}
employees([
    'Silas Butler',
    'Adnaan Buckley',
    'Juan Peterson',
    'Brendan Villarreal'
    ]);
employees([
        'Samuel Jackson',
        'Will Smith',
        'Bruce Willis',
        'Tom Holland'
]);

//02. Towns
function towns(inputData){
    for (const input of inputData) {
        let [townName, latitude, longitude] = input.split(' | ')
        let currentTown = {
            town : townName,
            latitude: Number(latitude).toFixed(2),
            longitude: Number(longitude).toFixed(2)
        }
        console.log(currentTown);
    }
}

towns(['Sofia | 42.696552 | 23.32601',
'Beijing | 39.913818 | 116.363625']);
towns(['Plovdiv | 136.45 | 812.575']);

//03. Store Provision
function storeProvision(productsOnStock, orderedProducts){
    let combined = [...productsOnStock, ...orderedProducts];
    let productsObj = {}

    for (let i = 0; i < combined.length; i+=2) {
        let currentProduct = combined[i];
        let currentQuantity = Number(combined[i + 1]);
        if (!productsObj.hasOwnProperty(currentProduct)) {
            productsObj[currentProduct] = currentQuantity;
        }
        else{
            productsObj[currentProduct] += currentQuantity;
        }
    }
    for (const [key, value] of Object.entries(productsObj)) {
        console.log(`${key} -> ${value}`)
    }
}

storeProvision(['Chips', '5', 'CocaCola', '9', 'Bananas', '14', 'Pasta', '4', 'Beer', '2'],
    ['Flour', '44', 'Oil', '12', 'Pasta', '7', 'Tomatoes', '70', 'Bananas', '30']);
storeProvision(['Salt', '2', 'Fanta', '4', 'Apple', '14', 'Water', '4', 'Juice', '5'],
    ['Sugar', '44', 'Oil', '12', 'Apple', '7', 'Tomatoes', '7', 'Bananas', '30']);

    //04. Movies
function movies(inputData){
    let moviesList = {};
for (const input of inputData) {
    if (input.startsWith('addMovie ')) {
        let name = input.substring(9, input.length);
        moviesList[name] = {}
        moviesList[name].name = name;
    }
    else if (input.includes(' directedBy ')) {
        let[movieName, movieDirector] = input.split(' directedBy ');
        if (moviesList.hasOwnProperty(movieName)) {
            moviesList[movieName].director = movieDirector;
        }
    } 
    else if (input.includes(' onDate ')) {
        let[movieName, movieDate] = input.split(' onDate ');
        if (moviesList.hasOwnProperty(movieName)) {
            moviesList[movieName].date = movieDate;
        }
    }
}
for (const movie in moviesList) {
    let movieKeys = Object.keys(moviesList[movie]);
    if (movieKeys.length === 3) {
        console.log(JSON.stringify(moviesList[movie]));
    }
}
}
movies([
    'addMovie Fast and Furious',
    'addMovie Godfather',
    'Inception directedBy Christopher Nolan',
    'Godfather directedBy Francis Ford Coppola',
    'Godfather onDate 29.07.2018',
    'Fast and Furious onDate 30.07.2018',
    'Batman onDate 01.08.2018',
    'Fast and Furious directedBy Rob Cohen'
    ]);
movies([
    'addMovie The Avengers',
    'addMovie Superman',
    'The Avengers directedBy Anthony Russo',
    'The Avengers onDate 30.07.2010',
    'Captain America onDate 30.07.2010',
    'Captain America directedBy Joe Russo'
    ]);

//05.
function heroRegister(inputData){
    let heroList = [];
for (const line of inputData) {
    let[heroName, heroLevel, items] = line.split(' / ');
    const currentHero = {
        name: heroName,
        level: Number(heroLevel),
        items,
        print: function(){
            console.log(`Hero: ${this.name}\nlevel => ${this.level}\nitems => ${this.items}`)
        }
    };
    heroList.push(currentHero);
}
heroList.sort((heroA, heroB) => heroA.level - heroB.level).forEach((hero) => hero.print());
}

heroRegister([
    'Isacc / 25 / Apple, GravityGun',
    'Derek / 12 / BarrelVest, DestructionSword',
    'Hes / 1 / Desolator, Sentinel, Antara'
    ]);
heroRegister([
    'Batman / 2 / Banana, Gun',
    'Superman / 18 / Sword',
    'Poppy / 28 / Sentinel, Antara'
    ]);

    //06. Words Tracker
function wordsTracker(inputData){
    let wordsToLookFor = inputData.shift().split(' ');
    const wordsAsObject = {};

    for (const word of wordsToLookFor) {
        wordsAsObject[word] = inputData.filter(w => w === word).length;
    }
    for (const foundWord of Object.entries(wordsAsObject).sort((wordA, wordB) => wordB[1] - wordA[1])) {
        console.log(`${foundWord[0]} - ${foundWord[1]}`);
    }
}
wordsTracker([
    'this sentence', 
    'In', 'this', 'sentence', 'you', 'have', 'to', 'count', 'the', 'occurrences', 'of', 'the', 'words', 'this', 'and', 'sentence', 'because', 'this', 'is', 'your', 'task']);
wordsTracker([
    'is the', 
    'first', 'sentence', 'Here', 'is', 'another', 'the', 'And', 'finally', 'the', 'the', 'sentence']);

//07. Odd Occurrences
function oddOccurrences(input){
    let splittedInput = input.split(' ')
    let wordWithOddCountObject = {};
    let arrayWithKeys = []

    for (const word of splittedInput) {
        newWord = word.toLowerCase();
        if (!wordWithOddCountObject.hasOwnProperty(newWord)) {
            wordWithOddCountObject[newWord] = 1;
        }
        else{
            wordWithOddCountObject[newWord]++;
        }
    }
    for (const [key, value] of Object.entries(wordWithOddCountObject)) {
        if (value % 2 === 1) {
            arrayWithKeys.push(key);
        }
    }
    console.log(arrayWithKeys.join(' '));
}
oddOccurrences('Java C# Php PHP Java PhP 3 C# 3 1 5 C#');
oddOccurrences('Cake IS SWEET is Soft CAKE sweet Food');

//08. Piccolo - I начин
function piccolo(input){
    let parkingLot =[];
    for (const line of input) {
        let [direction, car] = line.split(', ');
        if (direction === 'IN' && !parkingLot.includes(car)) {
            parkingLot.push(car);
        }
        else if (direction === 'OUT' && parkingLot.includes(car)){
                parkingLot.splice(parkingLot.indexOf(car), 1);
            }
        } 
        parkingLot.length === 0 ? console.log('Parking Lot is Empty') : console.log(parkingLot.sort().join('\n'));
    }
    
//08. Piccolo  - II начин
function piccolo(input){
let parkingLot = new Set();
for (const line of input) {
    let [direction, car] = line.split(', ');
    if (direction === 'IN') {
        parkingLot.add(car);
    }
    else{
        parkingLot.delete(car);
    } 
}
parkingLot.size === 0 ? console.log('Parking Lot is Empty') : console.log([...parkingLot].sort().join('\n'));
}

piccolo(['IN, CA2844AA',
'IN, CA1234TA',
'OUT, CA2844AA',
'IN, CA9999TT',
'IN, CA2866HI',
'OUT, CA1234TA',
'IN, CA2844AA',
'OUT, CA2866HI',
'IN, CA9876HH',
'IN, CA2822UU']
);
piccolo(['IN, CA2844AA',
'IN, CA1234TA',
'OUT, CA2844AA',
'OUT, CA1234TA']);

//09. Make a Dictionary
function JSONDictionary(JSONinput){
    let objectWithWords = {};
 for (const JSONline of JSONinput) {
     let line = JSON.parse(JSONline);
    for (const [term, description] of Object.entries(line)) {
     objectWithWords[term] = description;
    }
 }
 for (const [term, description] of Object.entries(objectWithWords).sort()) {
     console.log(`Term: ${term} => Definition: ${description}`);
 }  
 }
 JSONDictionary([
     '{"Coffee":"A hot drink made from the roasted and ground seeds (coffee beans) of a tropical shrub."}',
     '{"Bus":"A large motor vehicle carrying passengers by road, typically one serving the public on a fixed route and for a fare."}',
     '{"Boiler":"A fuel-burning apparatus or container for heating water."}',
     '{"Tape":"A narrow strip of material, typically used to hold or fasten something."}',
     '{"Microphone":"An instrument for converting sound waves into electrical energy variations which may then be amplified, transmitted, or recorded."}'
     ]);
 JSONDictionary([
     '{"Cup":"A small bowl-shaped container for drinking from, typically having a handle"}',
     '{"Cake":"An item of soft sweet food made from a mixture of flour, fat, eggs, sugar, and other ingredients, baked and sometimes iced or decorated."} ',
     '{"Watermelon":"The large fruit of a plant of the gourd family, with smooth green skin, red pulp, and watery juice."} ',
     '{"Music":"Vocal or instrumental sounds (or both) combined in such a way as to produce beauty of form, harmony, and expression of emotion."} ',
     '{"Art":"The expression or application of human creative skill and imagination, typically in a visual form such as painting or sculpture, producing works to be appreciated primarily for their beauty or emotional power."} '
     ]);

//10. Vehicle
class Vehicle{
    constructor(type, model, parts, fuel){
       this.type = type;
       this.model = model;
       this.parts = {
           engine: parts.engine,
           power: parts.power,
           quality: parts.engine * parts.power
       };
       this.fuel = fuel;
   }
       drive(fuel){
           this.fuel -= fuel
    }
}

let partsOne = { engine: 6, power: 100 };
let vehicleOne = new Vehicle('a', 'b', partsOne, 200);
vehicleOne.drive(100);
console.log(vehicleOne.fuel);
console.log(vehicleOne.parts.quality);

let parts = {engine: 9, power: 500};
let vehicle = new Vehicle('l', 'k', parts, 840);
vehicle.drive(20);
console.log(vehicle.fuel);
