//01. Employees
function employees(inputData){
    for (const input of inputData) {
        let newEmployee = {
            name: input,
            'personal number': input.length,
        };
        console.log(`Name: ${newEmployee.name} -- Personal Number: ${newEmployee['personal number']}`)
    }
}
employees([
    'Silas Butler',
    'Adnaan Buckley',
    'Juan Peterson',
    'Brendan Villarreal'
    ]);
employees([
        'Samuel Jackson',
        'Will Smith',
        'Bruce Willis',
        'Tom Holland'
]);

//02. Towns
function towns(inputData){
    for (const input of inputData) {
        let [townName, latitude, longitude] = input.split(' | ')
        let currentTown = {
            town : townName,
            latitude: Number(latitude).toFixed(2),
            longitude: Number(longitude).toFixed(2)
        }
        console.log(currentTown);
    }
}

towns(['Sofia | 42.696552 | 23.32601',
'Beijing | 39.913818 | 116.363625']);
towns(['Plovdiv | 136.45 | 812.575']);

//03. Store Provision
function storeProvision(productsInStock, orderedProducts){
    productsInStock = productsInStock.map((currentNumber, index) => {
        if(index % 2 === 1){
           return Number(currentNumber);
        }
        else{
            return currentNumber;
        }
    })
    for (let i = 0; i < orderedProducts.length; i+=2){
        let productName = orderedProducts[i];
        let productQuantity = Number(orderedProducts[i+1]);
        if (productsInStock.includes(productName)) {
            let indexOfQuantity = productsInStock.indexOf(productName) + 1;
            productsInStock[indexOfQuantity] += productQuantity;    
        }
        else{
            productsInStock.push(productName);
            productsInStock.push(productQuantity);
        }
    }
   for (let i = 0; i < productsInStock.length; i+=2) {
    console.log(`${productsInStock[i]} -> ${productsInStock[i+1]}`)
   }
}

storeProvision(['Chips', '5', 'CocaCola', '9', 'Bananas', '14', 'Pasta', '4', 'Beer', '2'],
    ['Flour', '44', 'Oil', '12', 'Pasta', '7', 'Tomatoes', '70', 'Bananas', '30']);
storeProvision(['Salt', '2', 'Fanta', '4', 'Apple', '14', 'Water', '4', 'Juice', '5'],
    ['Sugar', '44', 'Oil', '12', 'Apple', '7', 'Tomatoes', '7', 'Bananas', '30']);

    //04. Movies
function movies(inputData){
    let moviesList = {};
for (const input of inputData) {
    if (input.startsWith('addMovie ')) {
        let name = input.substring(9, input.length);
        moviesList[name] = {}
        moviesList[name].name = name;
    }
    else if (input.includes(' directedBy ')) {
        let[movieName, movieDirector] = input.split(' directedBy ');
        if (moviesList.hasOwnProperty(movieName)) {
            moviesList[movieName].director = movieDirector;
        }
    } 
    else if (input.includes(' onDate ')) {
        let[movieName, movieDate] = input.split(' onDate ');
        if (moviesList.hasOwnProperty(movieName)) {
            moviesList[movieName].date = movieDate;
        }
    }
}
for (const movie in moviesList) {
    let movieKeys = Object.keys(moviesList[movie]);
    if (movieKeys.length === 3) {
        console.log(JSON.stringify(moviesList[movie]));
    }
}
}
movies([
    'addMovie Fast and Furious',
    'addMovie Godfather',
    'Inception directedBy Christopher Nolan',
    'Godfather directedBy Francis Ford Coppola',
    'Godfather onDate 29.07.2018',
    'Fast and Furious onDate 30.07.2018',
    'Batman onDate 01.08.2018',
    'Fast and Furious directedBy Rob Cohen'
    ]);
movies([
    'addMovie The Avengers',
    'addMovie Superman',
    'The Avengers directedBy Anthony Russo',
    'The Avengers onDate 30.07.2010',
    'Captain America onDate 30.07.2010',
    'Captain America directedBy Joe Russo'
    ]);

//05.
function heroRegister(inputData){
    let heroList = [];
for (const line of inputData) {
    let[heroName, heroLevel, items] = line.split(' / ');
    const currentHero = {
        name: heroName,
        level: Number(heroLevel),
        items,
        print: function(){
            console.log(`Hero: ${this.name}\nlevel => ${this.level}\nitems => ${this.items}`)
        }
    };
    heroList.push(currentHero);
}
heroList.sort((heroA, heroB) => heroA.level - heroB.level).forEach((hero) => hero.print());
}

heroRegister([
    'Isacc / 25 / Apple, GravityGun',
    'Derek / 12 / BarrelVest, DestructionSword',
    'Hes / 1 / Desolator, Sentinel, Antara'
    ]);
heroRegister([
    'Batman / 2 / Banana, Gun',
    'Superman / 18 / Sword',
    'Poppy / 28 / Sentinel, Antara'
    ]);

    //06. Words Tracker
function wordsTracker(inputData){
    let wordsToLookFor = inputData.shift().split(' ');
    const wordsAsObject = {};

    for (const word of wordsToLookFor) {
        wordsAsObject[word] = inputData.filter(w => w === word).length;
    }
    for (const foundWord of Object.entries(wordsAsObject).sort((wordA, wordB) => wordB[1] - wordA[1])) {
        console.log(`${foundWord[0]} - ${foundWord[1]}`);
    }
}
wordsTracker([
    'this sentence', 
    'In', 'this', 'sentence', 'you', 'have', 'to', 'count', 'the', 'occurrences', 'of', 'the', 'words', 'this', 'and', 'sentence', 'because', 'this', 'is', 'your', 'task']);
wordsTracker([
    'is the', 
    'first', 'sentence', 'Here', 'is', 'another', 'the', 'And', 'finally', 'the', 'the', 'sentence']);

//07. Odd Occurrences
function oddOccurrences(input){
    let splittedInput = input.split(' ')
    let wordWithOddCountObject = {};
    let arrayWithKeys = []

    for (const word of splittedInput) {
        newWord = word.toLowerCase();
        if (!wordWithOddCountObject.hasOwnProperty(newWord)) {
            wordWithOddCountObject[newWord] = 1;
        }
        else{
            wordWithOddCountObject[newWord]++;
        }
    }
    for (const [key, value] of Object.entries(wordWithOddCountObject)) {
        if (value % 2 === 1) {
            arrayWithKeys.push(key);
        }
    }
    console.log(arrayWithKeys.join(' '));
}
oddOccurrences('Java C# Php PHP Java PhP 3 C# 3 1 5 C#');
oddOccurrences('Cake IS SWEET is Soft CAKE sweet Food');
